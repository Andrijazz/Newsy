#-------------------------------------------------
#
# Project created by QtCreator 2014-06-18T22:42:04
#
#-------------------------------------------------
# include(../defaults.pri)

QT       -= gui
QT       += core script

TARGET = Tokenizer
TEMPLATE = lib

DEFINES += TOKENIZER_LIBRARY

SOURCES += Tokenizer.cpp

HEADERS += Tokenizer.h\
        tokenizer_global.h \
    tokens.h\
    $$FLEXSOURCES

unix {
    target.path = /usr/lib
    INSTALLS += target
}

# we will create two custom variables in which we will add the path to their respective files,
# then you must add these variables to the OTHER_FILES variable to make it editable in Qt Creator.

FLEXSOURCES = lexer.l

###########################################################################################
# now we are going to create a Qt compiler ojbect for the EXTRA_COMPILERS FLAG
# this basically has a number of attributes which we need to set as outlined below
###########################################################################################

###########################################################################################
# WE ARE GENERATING LEXER.CPP
###########################################################################################
# this flag list the sources we wish to input to this custom compiler, in this case listed above
# in the FLEXSOURCES variable
flexsource.input = FLEXSOURCES
# now we need to say what files to output, for flex we want to create the lexer.cpp
flexsource.output = ${QMAKE_FILE_BASE}.cpp
# this is the actual compile command we wish to call. example for C files will look like: flex -o (output).c input.l
flexsource.commands = flex --header-file=${QMAKE_FILE_BASE}.h -o ${QMAKE_FILE_BASE}.cpp ${QMAKE_FILE_IN}

# once this compiler has been run we need to add the output files to the linker stage in this case
# as we are generating .cpp files we just add it to the SOURCES variable and it will be compiled
flexsource.variable_out = SOURCES

# this is just the name of the extra compiler used in the make file (make flex for example)
flexsource.name = Flex Sources ${QMAKE_FILE_IN}

# this flag ensures that the extra compiler is run before the main cpp one (as we need to have the .cpp files
# generated by flex before we use the g++ compiler)
flexsource.CONFIG += target_predeps

# USEFULL OPTION, BUT WE ARE NOT USING IT NOW!
# this tells the make clean command what files to remove
# flexsource.clean =  ${QMAKE_FILE_IN_BASE}.cpp

# finally add this to the qmake project so it will have the makefile generated
QMAKE_EXTRA_COMPILERS += flexsource

###########################################################################################
# WE ARE GENERATING LEXER.H
###########################################################################################
flexheader.input = FLEXSOURCES
flexheader.output = ${QMAKE_FILE_BASE}.h
flexheader.commands = @true
flexheader.variable_out = HEADERS
flexheader.name = Flex Headers ${QMAKE_FILE_IN}
flexheader.CONFIG += target_predeps no_link

QMAKE_EXTRA_COMPILERS += flexheader
